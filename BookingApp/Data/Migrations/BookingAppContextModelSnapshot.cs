// <auto-generated />
using System;
using BookingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingApp.Migrations
{
    [DbContext(typeof(BookingAppContext))]
    partial class BookingAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingApp.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnName("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("nchar(500)")
                        .IsFixedLength(true)
                        .HasMaxLength(500);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("event_types_type")
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<int?>("PlaceId")
                        .HasColumnName("place_PlaceId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("Type");

                    b.HasIndex("PlaceId");

                    b.ToTable("event");
                });

            modelBuilder.Entity("BookingApp.Models.EventTypes", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.HasKey("Type")
                        .HasName("event_types_pk");

                    b.ToTable("event_types");
                });

            modelBuilder.Entity("BookingApp.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnName("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnName("maximum_capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true)
                        .HasMaxLength(30);

                    b.HasKey("PlaceId");

                    b.ToTable("place");
                });

            modelBuilder.Entity("BookingApp.Models.RefSeatStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnName("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .HasColumnName("StatusDescription")
                        .HasColumnType("nchar(500)")
                        .IsFixedLength(true)
                        .HasMaxLength(500);

                    b.HasKey("StatusId")
                        .HasName("ref_seat_status_pk");

                    b.ToTable("ref_seat_status");
                });

            modelBuilder.Entity("BookingApp.Models.Rows", b =>
                {
                    b.Property<int>("RowNumber")
                        .HasColumnName("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("SectorNumber")
                        .HasColumnName("sectors_sectornumber")
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<int>("PlaceId")
                        .HasColumnName("sectors_place_PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Seatcount")
                        .HasColumnName("seatcount")
                        .HasColumnType("int");

                    b.HasKey("RowNumber", "SectorNumber", "PlaceId")
                        .HasName("rows_pk");

                    b.HasIndex("SectorNumber", "PlaceId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("BookingApp.Models.SeatPrices", b =>
                {
                    b.Property<string>("Seattype")
                        .HasColumnName("seattype")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("EventEventId")
                        .HasColumnName("event_EventId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(2, 0)");

                    b.HasKey("Seattype")
                        .HasName("seat_prices_pk");

                    b.HasIndex("EventEventId");

                    b.ToTable("seat_prices");
                });

            modelBuilder.Entity("BookingApp.Models.Seats", b =>
                {
                    b.Property<int>("Seatnumber")
                        .HasColumnName("seatnumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Eventdate")
                        .HasColumnName("eventdate")
                        .HasColumnType("date");

                    b.Property<int>("RowsRowNumber")
                        .HasColumnName("rows_RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("RowsSectorNumber")
                        .HasColumnName("rows_sectors_sectornumber")
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<int>("RowsPlaceId")
                        .HasColumnName("rows_sectors_place_PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("RefSeatStatusStatusId")
                        .HasColumnName("ref_seat_status_StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SeatPricesSeattype")
                        .IsRequired()
                        .HasColumnName("seat_prices_seattype")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Seatnumber", "Eventdate", "RowsRowNumber", "RowsSectorNumber", "RowsPlaceId")
                        .HasName("seats_pk");

                    b.HasIndex("RefSeatStatusStatusId");

                    b.HasIndex("SeatPricesSeattype");

                    b.HasIndex("RowsRowNumber", "RowsSectorNumber", "RowsPlaceId");

                    b.ToTable("seats");
                });

            modelBuilder.Entity("BookingApp.Models.Sectors", b =>
                {
                    b.Property<string>("Sectornumber")
                        .HasColumnName("sectornumber")
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rowscount")
                        .HasColumnName("rowscount")
                        .HasColumnType("int");

                    b.HasKey("Sectornumber", "PlaceId")
                        .HasName("sectors_pk");

                    b.HasIndex("PlaceId");

                    b.ToTable("sectors");
                });

            modelBuilder.Entity("BookingApp.Models.Event", b =>
                {
                    b.HasOne("BookingApp.Models.EventTypes", "TypeNavigation")
                        .WithMany("Event")
                        .HasForeignKey("Type")
                        .HasConstraintName("event_event_types_fk")
                        .IsRequired();

                    b.HasOne("BookingApp.Models.Place", "Place")
                        .WithMany("Event")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("event_place_fk");
                });

            modelBuilder.Entity("BookingApp.Models.Rows", b =>
                {
                    b.HasOne("BookingApp.Models.Sectors", "Sectors")
                        .WithMany("Rows")
                        .HasForeignKey("SectorNumber", "PlaceId")
                        .HasConstraintName("rows_sectors_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingApp.Models.SeatPrices", b =>
                {
                    b.HasOne("BookingApp.Models.Event", "EventEvent")
                        .WithMany("SeatPrices")
                        .HasForeignKey("EventEventId")
                        .HasConstraintName("seat_prices_event_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingApp.Models.Seats", b =>
                {
                    b.HasOne("BookingApp.Models.RefSeatStatus", "RefSeatStatusStatus")
                        .WithMany("Seats")
                        .HasForeignKey("RefSeatStatusStatusId")
                        .HasConstraintName("seats_ref_seat_status_fk")
                        .IsRequired();

                    b.HasOne("BookingApp.Models.SeatPrices", "SeatPricesSeattypeNavigation")
                        .WithMany("Seats")
                        .HasForeignKey("SeatPricesSeattype")
                        .HasConstraintName("seats_seat_prices_fk")
                        .IsRequired();

                    b.HasOne("BookingApp.Models.Rows", "Rows")
                        .WithMany("Seats")
                        .HasForeignKey("RowsRowNumber", "RowsSectorNumber", "RowsPlaceId")
                        .HasConstraintName("seats_rows_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingApp.Models.Sectors", b =>
                {
                    b.HasOne("BookingApp.Models.Place", "Place")
                        .WithMany("Sectors")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("sectors_place_fk")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
